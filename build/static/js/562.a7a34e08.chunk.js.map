{"version":3,"file":"static/js/562.a7a34e08.chunk.js","mappings":"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","sources":["common/utils/smallFn/convertDate.js","pages/regPages/UserProfile.jsx"],"sourcesContent":["import { format } from 'date-fns';\r\nimport { toZonedTime  } from 'date-fns-tz';\r\nimport { uk } from 'date-fns/locale';\r\n\r\nfunction translateUkrainianMonthToEnglish(month) {\r\n    const months = {\r\n        \"січня\": \"January\",\r\n        \"лютого\": \"February\",\r\n        \"березня\": \"March\",\r\n        \"квітня\": \"April\",\r\n        \"травня\": \"May\",\r\n        \"червня\": \"June\",\r\n        \"липня\": \"July\",\r\n        \"серпня\": \"August\",\r\n        \"вересня\": \"September\",\r\n        \"жовтня\": \"October\",\r\n        \"листопада\": \"November\",\r\n        \"грудня\": \"December\"\r\n    };\r\n\r\n    return months[month];\r\n}\r\n\r\nfunction parseUkrainianDate(dateStr) {\r\n    const cleanedDateStr = dateStr.replace('р.', '').replace('о', '').trim();\r\n    \r\n    const [day, monthUkr, year, time, time2, time3] = cleanedDateStr.split(' ');\r\n   \r\n    const monthEng = translateUkrainianMonthToEnglish(monthUkr);\r\n\r\n    // const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}.000+00:00`;\r\n    const formattedDateStr = `${monthEng} ${day}, ${year} ${time3}`;\r\n\r\n    return new Date(formattedDateStr).toUTCString();\r\n}\r\n\r\n\r\n\r\nconst formatDateToUkrainian = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const day = date.getUTCDate();\r\n    const monthNames = ['січня', 'лютого', 'березня', 'квітня', 'травня', 'червня', 'липня', 'серпня', 'вересня', 'жовтня', 'листопада', 'грудня'];\r\n    const month = monthNames[date.getUTCMonth()];\r\n    const year = date.getUTCFullYear();\r\n    const hours = String(date.getUTCHours()).padStart(2, '0');\r\n    const minutes = String(date.getUTCMinutes()).padStart(2, '0');\r\n  \r\n    return `${day} ${month} ${year} р. о ${hours}:${minutes}`;\r\n  };\r\n\r\nexport {parseUkrainianDate, formatDateToUkrainian};","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport DatePicker from 'react-datepicker'; // Import DatePicker component\r\nimport 'react-datepicker/dist/react-datepicker.css'; // Import DatePicker CSS\r\nimport { Link } from 'react-router-dom';\r\nimport { formatDateToUkrainian, parseUkrainianDate } from '../../common/utils/smallFn/convertDate';\r\nimport LogoImg from '../../services/images/Group12.svg'\r\n\r\nimport './userProfile.css';\r\n\r\nconst UserProfile = () => {\r\n    const [user, setUser] = useState(null);\r\n    const [orders, setOrders] = useState([]);\r\n    const [teacherFilter, setTeacherFilter] = useState('');\r\n    const [uniqueTeachers, setUniqueTeachers] = useState([]);\r\n    const [selectedBookingDate, setSelectedBookingDate] = useState(null);\r\n    const [highlightedBookingDates, setHighlightedBookingDates] = useState([]);\r\n\r\n    const [schoolData, setSchoolData] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchSchoolData = async () => {\r\n        try {\r\n            const response = await axios.get(`http://13.60.221.226/api/schools/${schoolId}`);\r\n            setSchoolData(response.data);\r\n            localStorage.setItem('schoolId', schoolId)\r\n        } catch (error) {\r\n            setError(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const schoolId = localStorage.getItem('schoolId')\r\n\r\n    useEffect(() => {\r\n        fetchUserData(setUser, axios, setOrders);\r\n        fetchSchoolData()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // After loading orders, extract unique teacher names and marked dates\r\n        if (orders.length > 0) {\r\n            const allTeachers = orders.flatMap(order => {\r\n                try {\r\n                    const slots = order.time;\r\n                    return slots.map(slot => slot.teacherName);\r\n                } catch (e) {\r\n                    console.error('Invalid time format:', order.time);\r\n                    return [];\r\n                }\r\n            });\r\n            setUniqueTeachers([...new Set(allTeachers)]);\r\n\r\n            const dates = orders.flatMap(order => order.time.map(slot => new Date(slot.time)));\r\n            setHighlightedBookingDates([...new Set(dates)]);\r\n        }\r\n    }, [orders]);\r\n\r\n    const fetchUserData = async (setUser, axios, setOrders) => {\r\n        const token = localStorage.getItem('token');\r\n        console.log(token)\r\n        if (token) {\r\n            try {\r\n                const response = await axios.get('http://13.60.221.226/api/me', {\r\n                    headers: { 'Authorization': `Bearer ${token}` }\r\n                });\r\n                const { user, orders } = response.data;\r\n                setUser(user);\r\n                setOrders(orders);\r\n            } catch (error) {\r\n                console.error('Error fetching user data:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            const response = await axios.post('http://13.60.221.226/api/logout');\r\n            if (response.status === 200) {\r\n                setUser(null);\r\n                setOrders([]);\r\n                localStorage.removeItem('token');\r\n                console.log('Logged out successfully');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging out:', error);\r\n        }\r\n    };\r\n\r\n    // Filter orders by selected date\r\n    const filterByDate = (orders, date) => {\r\n        if (!date) return orders;\r\n        return orders.filter(order => {\r\n            const slots = order.time || [];\r\n            return slots.some(slot => new Date(slot.time).getDate(), new Date(selectedBookingDate).getDate());\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className='mains'>\r\n            <div className='containers'>\r\n                <div className=\"user-profile\">\r\n                    <div className='logos'>\r\n                        <div className='logos-items'>\r\n                            <Link to={`/${schoolId}`}><img src={schoolData[0].logo} alt=\"Logo\" /></Link>\r\n                            <div className='logo-names'>Мовна школа <span>{schoolData[0].name}</span></div>\r\n                        </div>\r\n                    </div>\r\n                    <h2>Особистий кабінет</h2>\r\n                    {user ? (\r\n                        <>\r\n                            <strong>Вітаємо, {user.username}</strong>\r\n                            {/* <p>Email: {user.email}</p>\r\n                            <p>Телефон: {user.phone}</p> */}\r\n                            <h3>Ваші записи</h3>\r\n                            {/* \r\n                    <div>\r\n                        <button onClick={() => setTeacherFilter('')}>Показати всіх</button>\r\n                        {uniqueTeachers.map((teacher, idx) => (\r\n                            <button key={idx} onClick={() => setTeacherFilter(teacher)}>\r\n                                {teacher}\r\n                            </button>\r\n                        ))}\r\n                    </div> */}\r\n\r\n                            {/* DatePicker for date filtering */}\r\n                            <DatePicker\r\n                                selected={selectedBookingDate}\r\n                                onChange={(date) => setSelectedBookingDate(date)}\r\n                                dateFormat=\"yyyy-MM-dd\"\r\n                                isClearable\r\n                                placeholderText=\"Виберіть дату для фільтрації записів\"\r\n                                inline\r\n                                highlightDates={highlightedBookingDates}\r\n                            />\r\n\r\n                            {/* Filtered orders by selected date */}\r\n                            {selectedBookingDate && <p>Вибрана дата: {selectedBookingDate.toLocaleDateString()}</p>}\r\n\r\n                            {orders.length > 0 ? (\r\n                                <ul className=\"orders-list\">\r\n\r\n                                    {filterByDate(orders, selectedBookingDate)\r\n                                        .map((order, index) => {\r\n                                            let formattedSlots = [];\r\n\r\n                                            try {\r\n                                                const slots = order.time;\r\n                                                formattedSlots = slots.map(slot => ({\r\n                                                    teacherName: slot.teacherName,\r\n                                                    lang: slot.lang,\r\n                                                    levelName: slot.levelName,\r\n                                                    lessonTypes: slot.lessonTypes,\r\n                                                    time: formatDateToUkrainian(slot.time),\r\n                                                    payment_status: slot.payment_status\r\n                                                }));\r\n                                            } catch (e) {\r\n                                                console.error('Invalid time format:', order.time);\r\n                                            }\r\n\r\n                                            const filteredSlots = formattedSlots\r\n                                                ? formattedSlots.filter(slot => {\r\n                                                    const slotDate = new Date(parseUkrainianDate(slot.time));\r\n                                                    return slotDate instanceof Date && !isNaN(slotDate) &&\r\n                                                        selectedBookingDate instanceof Date && !isNaN(selectedBookingDate) &&\r\n                                                        slotDate.getDate() === selectedBookingDate.getDate();\r\n                                                })\r\n                                                : [];\r\n\r\n                                            // Условие для предотвращения рендера пустого заказа\r\n                                            if (filteredSlots.length === 0) return null;\r\n                                            console.log(filteredSlots)\r\n                                            return (\r\n                                                <li key={index}>\r\n\r\n                                                    <ul>\r\n                                                        {filteredSlots.map((slot, idx) => (\r\n                                                            <li key={idx} style={{ marginBottom: '10px' }}>\r\n                                                                <div className='order-item'>\r\n                                                                    <strong>Запис на урок:</strong>\r\n                                                                    <div className='order-item-el'><div className='order-item-el-head'>Вчитель:</div> <div className='order-item-el-desc'>{slot.teacherName}</div></div>\r\n                                                                    <div className='order-item-el'><div className='order-item-el-head'>Мова:</div> <div className='order-item-el-desc'>{slot.lang}</div></div>\r\n                                                                    <div className='order-item-el'><div className='order-item-el-head'>Рівень:</div> <div className='order-item-el-desc'>{slot.levelName}</div></div>\r\n                                                                    <div className='order-item-el'><div className='order-item-el-head'>Тип уроку:</div> <div className='order-item-el-desc'>{slot.lessonTypes}</div></div>\r\n                                                                    <div className='order-item-el'><div className='order-item-el-head'>Час:</div> <div className='order-item-el-desc'>{slot.time}</div></div>\r\n                                                                    <div className='order-item-el'><div className='order-item-el-head'>Статус оплати:</div> <div className='order-item-el-desc'>{slot.payment_status}</div></div>\r\n                                                                </div>\r\n                                                                {order.students.length > 0 && (\r\n                                                                    <div className='students-list' style={{ marginTop: '10px' }}>\r\n                                                                        <div className='students-head'>Студенти:</div>\r\n                                                                        <ul>\r\n                                                                            {order.students.map((student, studentIdx) => (\r\n                                                                                <li key={studentIdx}>\r\n                                                                                    <div className='student-name'>{student.name}</div>\r\n                                                                                </li>\r\n                                                                            ))}\r\n                                                                        </ul>\r\n                                                                    </div>\r\n                                                                )}\r\n\r\n                                                            </li>\r\n                                                        ))}\r\n                                                    </ul>\r\n                                                </li>\r\n                                            );\r\n                                        })}\r\n\r\n                                </ul>\r\n                            ) : (\r\n                                <p>Замовлення відсутні.</p>\r\n                            )}\r\n                        </>\r\n                    ) : (\r\n                        <p>Завантаження даних користувача...</p>\r\n                    )}\r\n\r\n                    <Link to={`/${schoolId}`}>\r\n                        <button className=\"btn-logout\" onClick={handleLogout}>Вийти</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserProfile;\r\n"],"names":["parseUkrainianDate","dateStr","cleanedDateStr","replace","trim","day","monthUkr","year","time","time2","time3","split","monthEng","Date","toUTCString","formatDateToUkrainian","date","getUTCDate","getUTCMonth","getUTCFullYear","String","getUTCHours","padStart","getUTCMinutes","UserProfile","user","setUser","useState","orders","setOrders","teacherFilter","setTeacherFilter","uniqueTeachers","setUniqueTeachers","selectedBookingDate","setSelectedBookingDate","highlightedBookingDates","setHighlightedBookingDates","schoolData","setSchoolData","loading","setLoading","error","setError","schoolId","localStorage","getItem","useEffect","fetchUserData","axios","async","response","get","data","setItem","message","fetchSchoolData","length","allTeachers","flatMap","order","map","slot","teacherName","e","console","Set","dates","token","log","headers","_jsx","className","children","_jsxs","Link","to","src","logo","alt","name","_Fragment","username","DatePicker","selected","onChange","dateFormat","isClearable","placeholderText","inline","highlightDates","toLocaleDateString","filterByDate","filter","some","getDate","index","formattedSlots","lang","levelName","lessonTypes","payment_status","filteredSlots","slotDate","isNaN","idx","style","marginBottom","students","marginTop","student","studentIdx","onClick","post","status","removeItem"],"sourceRoot":""}