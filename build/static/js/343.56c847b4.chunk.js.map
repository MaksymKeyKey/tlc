{"version":3,"file":"static/js/343.56c847b4.chunk.js","mappings":"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","sources":["pages/chooseDate/testCalendarWithDatePickerDefault.jsx","pages/chooseDate/date.jsx"],"sourcesContent":["import '@mobiscroll/react/dist/css/mobiscroll.min.css';\r\nimport { Datepicker, Page, setOptions, localeUa } from '@mobiscroll/react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport './date.css'\r\n\r\nsetOptions({\r\n  locale: localeUa,\r\n  theme: 'ios',\r\n  themeVariant: 'light'\r\n});\r\n\r\nfunction Calendar2() {\r\n  const [dates, setDates] = useState([]);\r\n  const [multiple, setMultiple] = useState([]);\r\n  const min = '2024-09-01T00:00';\r\n  const max = '2024-09-11T00:00';\r\n  const [datetimeLabels, setDatetimeLabels] = useState([]);\r\n  const [datetimeInvalid, setDatetimeInvalid] = useState([]);\r\n  const [date, setDate] = useState([]);\r\n\r\n  const location = useLocation();\r\n  const { teacherDate } = location.state || {};\r\n  const { level } = location.state || {};\r\n  const { allTeachers } = location.state || {};\r\n\r\n  const mergeWorkAndNonWorkTimes = (data) => {\r\n\r\n    const grouped = data.reduce((acc, booking) => {\r\n      const dateKey = booking.d;\r\n      \r\n      if (!acc[dateKey]) {\r\n        acc[dateKey] = {\r\n          ...booking,\r\n          workTime: [...booking.workTime],\r\n          nonWorkTime: [...booking.nonWorkTime],\r\n          allSlots: booking.allSlots || 0,\r\n        };\r\n      } else {\r\n\r\n        acc[dateKey].workTime = [...acc[dateKey].workTime, ...booking.workTime];\r\n        acc[dateKey].nonWorkTime = [...new Set([...acc[dateKey].nonWorkTime, ...booking.nonWorkTime])]; // Unique nonWorkTime\r\n        acc[dateKey].allSlots += booking.allSlots || 0;\r\n      }\r\n      return acc;\r\n    }, {});\r\n    // Recalculate non-working intervals\r\n    return Object.values(grouped).map((booking) => {\r\n      const allWorkTimes = []\r\n      booking.workTime.forEach((wt) => {\r\n        console.log(booking)\r\n        if (wt.slots > 0) {\r\n          allWorkTimes.push(wt.time);\r\n        }\r\n      });\r\n      \r\n      const combinedWorkTime = calculateCombinedWorkTime(allWorkTimes); // Custom function to combine overlapping times\r\n      const nonWorkTime = calculateNonWorkTime(booking.nonWorkTime, combinedWorkTime);\r\n      return {\r\n        ...booking,\r\n        workTime: combinedWorkTime,\r\n        nonWorkTime,\r\n        allSlots: booking.allSlots,\r\n      };\r\n    });\r\n  };\r\n\r\n  const calculateCombinedWorkTime = (workTimes) => {\r\n\r\n    const sortedTimes = workTimes.map(time => new Date(time)).sort((a, b) => a - b);\r\n\r\n    const combined = [];\r\n    let currentInterval = null;\r\n\r\n    sortedTimes.forEach(time => {\r\n      if (!currentInterval) {\r\n        currentInterval = [time, time]; // Start a new interval\r\n      } else {\r\n        // If the current time is within or adjacent to the current interval, extend it\r\n        if (time <= currentInterval[1]) {\r\n          currentInterval[1] = new Date(Math.max(currentInterval[1], time)); // Extend the end time\r\n        } else {\r\n          // Otherwise, push the current interval to the combined list and start a new interval\r\n          combined.push(currentInterval);\r\n          currentInterval = [time, time];\r\n        }\r\n      }\r\n    });\r\n\r\n\r\n    if (currentInterval) {\r\n      combined.push(currentInterval);\r\n\r\n    }\r\n\r\n    return combined.map(([start]) => ({ start }));\r\n  };\r\n\r\n  const calculateNonWorkTime = (nonWorkTime, workTimes) => {\r\n\r\n    workTimes = workTimes.map(wt => {\r\n      const adjustedTime = new Date(wt.start.getTime() - 3 * 60 * 60 * 1000);\r\n      return { ...wt, time: adjustedTime };\r\n    }).sort((a, b) => new Date(a.time) - new Date(b.time));\r\n\r\n    const nonWorkTimes = [];\r\n\r\n    // Non-working time from the start of the day to the first work time\r\n    const startOfDay = new Date(new Date(workTimes[0].time).setUTCHours(0, 0, 0, 0));\r\n    const firstWorkTime = new Date(workTimes[0].time);\r\n\r\n\r\n\r\n    if (startOfDay < firstWorkTime) {\r\n      nonWorkTimes.push({\r\n        start: startOfDay,\r\n        end: new Date(firstWorkTime.getTime() - 60 * 1000) // 1 minute before work starts\r\n      });\r\n    }\r\n\r\n    // Process work times and add non-working intervals where nr = 0\r\n    for (let i = 0; i < workTimes.length; i++) {\r\n      const currentStart = new Date(workTimes[i].time);\r\n\r\n      if (workTimes[i].slots === 0) {\r\n        const nextStart = (i < workTimes.length - 1) ? new Date(workTimes[i + 1].time) : new Date(currentStart.setUTCHours(23, 59, 0, 0));\r\n        nonWorkTimes.push({\r\n          start: currentStart,\r\n          end: new Date(nextStart.getTime() - 60 * 1000)\r\n        });\r\n      } else {\r\n        if (i > 0 && workTimes[i - 1].slots !== 0) {\r\n          const previousEnd = new Date(workTimes[i - 1].time);\r\n          if (previousEnd < currentStart) {\r\n            nonWorkTimes.push({\r\n              start: new Date(previousEnd.getTime() + 60 * 60 * 1000 - 60 * 1000 * 31),  // 1 minute after 1 hour\r\n              end: new Date(currentStart.getTime() - 60 * 1000)  // 1 minute before the current work interval\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Non-working time from the end of the last work time to the end of the day\r\n    const lastWorkTime = new Date(workTimes[workTimes.length - 1].time);\r\n    const endOfDay = new Date(lastWorkTime);\r\n    endOfDay.setUTCHours(23, 59, 0, 0);\r\n\r\n    if (lastWorkTime < endOfDay) {\r\n      nonWorkTimes.push({\r\n        start: new Date(lastWorkTime.getTime() + 60 * 60 * 1000 - 60 * 1000 * 31),\r\n        end: endOfDay\r\n      });\r\n    }\r\n\r\n    const mergedNonWorkTime = [...nonWorkTimes];\r\n    const uniqueNonWorkTime = Array.from(\r\n      new Set(mergedNonWorkTime.map(nwt => `${nwt.start}-${nwt.end}`))\r\n    ).map(str => {\r\n      const [start, end] = str.split('-');\r\n      return { start: new Date(start), end: new Date(end) };\r\n    });\r\n\r\n    return uniqueNonWorkTime;\r\n  };\r\n\r\n  const handlePageLoadingDatetime = useCallback(() => {\r\n    const invalid = [];\r\n    const labels = [];\r\n\r\n    date.forEach(booking => {\r\n      const d = new Date(booking.d);\r\n      const localDate = new Date(d.getTime() + d.getTimezoneOffset() * 60000);\r\n      if (booking.allSlots > 0) {\r\n        labels.push({\r\n          start: localDate,\r\n          title: booking.allSlots + ' SPOTS',\r\n          textColor: '#e1528f',\r\n        });\r\n        invalid.push(...booking.nonWorkTime);\r\n      } else {\r\n        invalid.push(localDate);\r\n      }\r\n    });\r\n\r\n    setDatetimeLabels(labels);\r\n    setDatetimeInvalid(invalid);\r\n  }, [date]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        if (teacherDate) {\r\n          const teacherDates = teacherDate[0].level.filter(lv => lv.levelName === level);\r\n          teacherDates[0].date.forEach((booking) => {\r\n            booking.allSlots = booking.workTime.reduce((total, item) => total + item.slots, 0);\r\n          });\r\n\r\n          setDate(teacherDates[0].date);\r\n        } else if (allTeachers) {\r\n          allTeachers.forEach((booking) => {\r\n            booking.allSlots = booking.workTime.reduce((total, item) => total + item.slots, 0);\r\n          });\r\n          const mergedTeachers = mergeWorkAndNonWorkTimes(allTeachers);\r\n\r\n          setDate(mergedTeachers);\r\n        }\r\n\r\n        const storedDates = localStorage.getItem('selectedDates');\r\n        if (storedDates) {\r\n          setMultiple(JSON.parse(storedDates));\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to fetch bookings', err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array to run only once\r\n\r\n  useEffect(() => {\r\n    handlePageLoadingDatetime();\r\n  }, [date, handlePageLoadingDatetime]); // Update datetime labels and invalid dates when date changes\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('selectedDates', JSON.stringify(dates));\r\n  }, [dates]);\r\n\r\n  const handleSaveDates = () => {\r\n    if (Array.isArray(multiple)) {\r\n      setDates((prevDates) => [...prevDates, ...multiple.map(formatDateTime)]);\r\n    } else {\r\n      console.error(\"Expected 'multiple' to be an array, but got:\", typeof multiple);\r\n    }\r\n  };\r\n\r\n  const handleChangeMultiple = useCallback((args) => {\r\n    let newValue = args.value;\r\n\r\n    if (newValue === null) {\r\n      setMultiple([]);\r\n    } else if (newValue instanceof Date) {\r\n      setMultiple([newValue]);\r\n    } else if (Array.isArray(newValue)) {\r\n      setMultiple(newValue);\r\n    } else {\r\n      console.error(\"Unexpected type for 'args.value':\", newValue);\r\n      setMultiple([]);\r\n    }\r\n  }, []);\r\n\r\n  const handleRemoveDate = (dateToRemove) => {\r\n    setDates((prevDates) => prevDates.filter(date => date !== dateToRemove));\r\n  };\r\n\r\n  const formatDateTime = (dateString) => {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\r\n    return new Date(dateString).toLocaleString('uk-UA', options);\r\n  };\r\n\r\n  return (\r\n    <Page className=\"md-calendar-booking\">\r\n    <div className=\"mbsc-form-group\">\r\n      <div className=\"mbsc-form-group-title\">Select date & time</div>\r\n      <Datepicker\r\n        display=\"inline\"\r\n        controls={['calendar', 'timegrid']}\r\n        min={min}\r\n        max={max}\r\n        minTime=\"05:00\"\r\n        maxTime=\"23:59\"\r\n        stepMinute={30}\r\n        width={null}\r\n        labels={datetimeLabels}\r\n        invalid={datetimeInvalid}\r\n        onPageLoading={handlePageLoadingDatetime}\r\n        cssClass=\"booking-datetime\"\r\n        onChange={handleChangeMultiple}\r\n        multiple={true}\r\n      />\r\n      <button onClick={handleSaveDates}>Сохранить выбранные даты и время</button>\r\n    </div>\r\n    <div className=\"selected-dates\">\r\n      <h3>Selected Dates & Times:</h3>\r\n      {Array.isArray(dates) && dates.length > 0 ? (\r\n        <ul>\r\n          {dates.map((date, index) => (\r\n            <li key={index}>\r\n              {date}\r\n              <button onClick={() => handleRemoveDate(date)}>Удалить</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No dates selected.</p>\r\n      )}\r\n    </div>\r\n  </Page>\r\n  \r\n  );\r\n}\r\n\r\nexport default Calendar2;\r\n","import { useLocation } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Calendar2 from \"./testCalendarWithDatePickerDefault\";\r\n\r\nconst Date = () => {\r\n\r\n  const [final, setFinal] = useState(null)\r\n\r\n  const location = useLocation();\r\n  const { teacherDate } = location.state || {};\r\n  const { level } = location.state || {};\r\n  const { allTeachers } = location.state || {};\r\n  const { lang } = location.state || {};\r\n  const { teacherId } = location.state || {};\r\n\r\n\r\n  const HandleFinish = () => {\r\n    if (allTeachers) {\r\n      return '/teacher';\r\n    } else if (teacherDate) {\r\n      return '/final';\r\n    }\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (teacherDate) {\r\n      setFinal(teacherDate[0].lang)\r\n    }\r\n    else if (allTeachers) {\r\n      setFinal(lang[0])\r\n    }\r\n\r\n  }, [])\r\n  return (\r\n    <div>\r\n      <h1>Виберіть дату</h1>\r\n      <Link to={HandleFinish()} state={{ lingua: final, level: level, teacherId: teacherId }}><button>Далі</button></Link>\r\n      <Calendar2 />\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Date;\r\n"],"names":["setOptions","locale","localeUa","theme","themeVariant","dates","setDates","useState","multiple","setMultiple","datetimeLabels","setDatetimeLabels","datetimeInvalid","setDatetimeInvalid","date","setDate","location","useLocation","teacherDate","state","level","allTeachers","calculateCombinedWorkTime","workTimes","sortedTimes","map","time","Date","sort","a","b","combined","currentInterval","forEach","Math","max","push","_ref","start","calculateNonWorkTime","nonWorkTime","wt","adjustedTime","getTime","nonWorkTimes","startOfDay","setUTCHours","firstWorkTime","end","i","length","currentStart","slots","nextStart","previousEnd","lastWorkTime","endOfDay","mergedNonWorkTime","Array","from","Set","nwt","str","split","handlePageLoadingDatetime","useCallback","invalid","labels","booking","d","localDate","getTimezoneOffset","allSlots","title","textColor","useEffect","async","teacherDates","filter","lv","levelName","workTime","reduce","total","item","mergedTeachers","data","grouped","acc","dateKey","Object","values","allWorkTimes","console","log","combinedWorkTime","mergeWorkAndNonWorkTimes","storedDates","localStorage","getItem","JSON","parse","err","error","fetchData","setItem","stringify","handleChangeMultiple","args","newValue","value","isArray","formatDateTime","dateString","toLocaleString","year","month","day","hour","minute","_jsxs","Page","className","children","_jsx","Datepicker","display","controls","min","minTime","maxTime","stepMinute","width","onPageLoading","cssClass","onChange","onClick","handleSaveDates","prevDates","index","handleRemoveDate","dateToRemove","final","setFinal","lang","teacherId","Link","to","lingua","Calendar2"],"sourceRoot":""}